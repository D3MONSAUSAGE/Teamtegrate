
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { createRpcFunctions } from './rpc';

const SUPABASE_URL = "https://zlfpiovyodiyecdueiig.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsZnBpb3Z5b2RpeWVjZHVlaWlnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3NzA0OTEsImV4cCI6MjA2MDM0NjQ5MX0.GAY6GgcApuuuH9MBXaThy-nW4UciDq2t6iSo6mMGiF4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  }
});

// Helper function to create and execute SQL-based RPC functions
export const setupRpcFunctions = async () => {
  try {
    console.log('Setting up RPC functions through setupRpcFunctions...');
    // Try to directly use the RPC functions first
    const tasksTestResult = await supabase.rpc('get_all_tasks' as any);
    console.log('Testing get_all_tasks function result:', !tasksTestResult.error);

    const projectsTestResult = await supabase.rpc('get_all_projects' as any);
    console.log('Testing get_all_projects function result:', !projectsTestResult.error);

    // If the functions don't exist yet, create them
    if (tasksTestResult.error || projectsTestResult.error) {
      console.log('RPC functions not ready, creating them...');
      // Call the create functions to ensure they exist
      await supabase.rpc('create_get_all_tasks_function' as any);
      await supabase.rpc('create_get_all_projects_function' as any);
      
      // Test again after creation
      const retestTasks = await supabase.rpc('get_all_tasks' as any);
      const retestProjects = await supabase.rpc('get_all_projects' as any);
      
      console.log('RPC functions created: Tasks working:', !retestTasks.error);
      console.log('RPC functions created: Projects working:', !retestProjects.error);
    }

    console.log('RPC functions setup complete from setupRpcFunctions');
    return true;
  } catch (error) {
    console.error('Failed to setup/test RPC functions in setupRpcFunctions:', error);
    
    // Try alternative function creation method as fallback
    try {
      console.log('Attempting to use createRpcFunctions as fallback...');
      await createRpcFunctions();
      return true;
    } catch (fallbackError) {
      console.error('Fallback createRpcFunctions also failed:', fallbackError);
      return false;
    }
  }
};
