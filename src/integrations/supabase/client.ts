
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zlfpiovyodiyecdueiig.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsZnBpb3Z5b2RpeWVjZHVlaWlnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3NzA0OTEsImV4cCI6MjA2MDM0NjQ5MX0.GAY6GgcApuuuH9MBXaThy-nW4UciDq2t6iSo6mMGiF4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true // Enable debug to trace auth issues
  },
  global: {
    headers: {
      'x-application-name': 'teamtegrate',
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced session debugging with error handling and token verification
supabase.auth.onAuthStateChange(async (event, session) => {
  console.log('üîÑ Auth state change:', event);
  console.log('üìä Session status:', session ? 'EXISTS' : 'NULL');
  
  if (session) {
    console.log('üë§ User ID:', session.user?.id);
    console.log('üîë Access token length:', session.access_token?.length || 0);
    console.log('‚è∞ Token expires at:', new Date(session.expires_at! * 1000));
    console.log('üè¢ Session user metadata:', session.user?.user_metadata);
    
    // Test if backend recognizes this session
    try {
      console.log('üß™ Testing backend session recognition...');
      const { data: orgId, error } = await supabase.rpc('get_current_user_organization_id');
      if (error) {
        console.error('‚ùå Backend session test failed:', error);
      } else {
        console.log('‚úÖ Backend recognizes session - Org ID:', orgId);
      }
    } catch (testError) {
      console.error('‚ùå Session test error:', testError);
    }
  }
  
  if (event === 'TOKEN_REFRESHED') {
    console.log('‚úÖ Token successfully refreshed');
  }
  
  if (event === 'SIGNED_OUT') {
    console.log('üëã User signed out, clearing local storage');
    // Clear any cached data
    localStorage.removeItem('sb-zlfpiovyodiyecdueiig-auth-token');
    // Clear any other potential auth remnants
    Object.keys(localStorage).forEach(key => {
      if (key.includes('supabase') || key.includes('auth')) {
        localStorage.removeItem(key);
      }
    });
  }
  
  if (event === 'SIGNED_IN') {
    console.log('‚úÖ User signed in successfully');
  }
});

// Add session health check utility
export const checkSessionHealth = async () => {
  try {
    console.log('üîç Performing session health check...');
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    if (sessionError) {
      console.error('‚ùå Session retrieval error:', sessionError);
      return { healthy: false, error: sessionError };
    }
    
    if (!session) {
      console.log('‚ùå No active session found');
      return { healthy: false, error: 'No session' };
    }
    
    console.log('‚úÖ Session exists, testing backend recognition...');
    const { data: orgId, error: orgError } = await supabase.rpc('get_current_user_organization_id');
    
    if (orgError) {
      console.error('‚ùå Backend session recognition failed:', orgError);
      return { healthy: false, error: orgError, session };
    }
    
    console.log('‚úÖ Session is healthy - Org ID:', orgId);
    return { healthy: true, session, organizationId: orgId };
  } catch (error) {
    console.error('‚ùå Session health check failed:', error);
    return { healthy: false, error };
  }
};

// Add session recovery utility
export const recoverSession = async () => {
  try {
    console.log('üîß Attempting session recovery...');
    
    // Force refresh the session
    const { data: { session }, error } = await supabase.auth.refreshSession();
    
    if (error) {
      console.error('‚ùå Session refresh failed:', error);
      return { recovered: false, error };
    }
    
    if (session) {
      console.log('‚úÖ Session recovered successfully');
      return { recovered: true, session };
    }
    
    console.log('‚ùå No session to recover');
    return { recovered: false, error: 'No session' };
  } catch (error) {
    console.error('‚ùå Session recovery failed:', error);
    return { recovered: false, error };
  }
};
