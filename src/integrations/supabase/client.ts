
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zlfpiovyodiyecdueiig.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsZnBpb3Z5b2RpeWVjZHVlaWlnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3NzA0OTEsImV4cCI6MjA2MDM0NjQ5MX0.GAY6GgcApuuuH9MBXaThy-nW4UciDq2t6iSo6mMGiF4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: false // Disable debug to reduce noise
  },
  global: {
    headers: {
      'x-application-name': 'teamtegrate'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced session debugging with error handling
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase Auth state change:', event, 'Session:', session ? 'exists' : 'null');
  
  try {
    if (event === 'TOKEN_REFRESHED') {
      console.log('Supabase: Token successfully refreshed');
    }
    
    if (event === 'SIGNED_OUT') {
      console.log('Supabase: User signed out, clearing local storage');
      // Clear any cached data
      try {
        localStorage.removeItem('sb-zlfpiovyodiyecdueiig-auth-token');
      } catch (storageError) {
        console.warn('Supabase: Error clearing localStorage:', storageError);
      }
    }
    
    if (session) {
      console.log('Supabase: User ID:', session.user?.id);
      if (session.expires_at) {
        console.log('Supabase: Session expires at:', new Date(session.expires_at * 1000));
      }
    }
    
    if (event === 'SIGNED_IN') {
      console.log('Supabase: User successfully signed in');
    }
    
    // Handle any auth errors that might occur
    if (event === 'SIGNED_OUT' && !session) {
      console.log('Supabase: Authentication session ended');
    }
  } catch (error) {
    console.error('Supabase: Error in auth state change handler:', error);
  }
});

// Add connection error monitoring with retry logic
let connectionRetryCount = 0;
const maxConnectionRetries = 3;

const originalQuery = supabase.from.bind(supabase);
supabase.from = (...args) => {
  const query = originalQuery(...args);
  
  // Add retry logic for connection errors
  const originalSelect = query.select.bind(query);
  query.select = (...selectArgs) => {
    const selectQuery = originalSelect(...selectArgs);
    
    const originalExecute = selectQuery.then.bind(selectQuery);
    selectQuery.then = (onFulfilled, onRejected) => {
      return originalExecute(
        onFulfilled,
        (error) => {
          if (error && error.message && error.message.includes('Failed to fetch') && connectionRetryCount < maxConnectionRetries) {
            connectionRetryCount++;
            console.warn(`Supabase: Connection retry ${connectionRetryCount}/${maxConnectionRetries} for query`);
            
            // Retry after a delay
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                originalExecute(resolve, reject);
              }, 1000 * connectionRetryCount);
            });
          } else {
            connectionRetryCount = 0; // Reset on success or max retries reached
            if (onRejected) {
              return onRejected(error);
            }
            throw error;
          }
        }
      );
    };
    
    return selectQuery;
  };
  
  return query;
};
